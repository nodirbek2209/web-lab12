plugins {
    id 'java'
    id 'org.springframework.boot' version '3.4.3'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'com.netflix.dgs.codegen' version '7.0.3'
    id 'org.graalvm.buildtools.native' version '0.10.5'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(23)
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-graphql'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'io.projectreactor:reactor-test'
    testImplementation 'org.springframework.graphql:spring-graphql-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    runtimeOnly 'org.postgresql:postgresql'


    // ✅ JPA (for MySQL, PostgreSQL, H2)
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

    // ✅ H2 (in-memory)
    runtimeOnly 'com.h2database:h2'

    // ✅ MySQL
    runtimeOnly 'com.mysql:mysql-connector-j'

    // ✅ PostgreSQL (already present)
    runtimeOnly 'org.postgresql:postgresql'

    // ✅ MongoDB
    implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'
}

generateJava {
    schemaPaths = ["${projectDir}/src/main/resources/graphql-client"]
    packageName = 'com.example.weblab.codegen'
    generateClient = true
}

tasks.named('test') {
    useJUnitPlatform()
}
